openapi: 3.0.0
info:
  title: User API
  description: API para la gesti칩n de usuarios.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Servidor local
paths:
  /auth/register:
    post:
      summary: Crear un nuevo usuario
      description: Crea un nuevo usuario con los datos proporcionados.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        200:
          description: Usuario creado correctamente.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Error de validaci칩n en los datos proporcionados.
        500:
          description: Error interno del servidor.
  /auth/login:
    post:
      summary: Logear a un usuario
      description: Logea a un usuario con los datos proporcionados.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        200:
          description: Usuario logeado correctamente.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Error de validaci칩n en los datos proporcionados.
        401:
          description: Credenciales inv치lidas.
        500:
          description: Error interno del servidor.
  /users:
    get:
      summary: Obtener todos los usuarios
      description: Retorna una lista de todos los usuarios registrados.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de usuarios obtenida correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        500:
          description: Error interno del servidor.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
          type: string
          example: "mauriciomoraga"
        email:
          type: string
          format: email
          example: "example@mail.com"
        password:
          type: string
          example: "hashedpassword123"
    UserCreate:
      type: object
      required:
        - email
        - password
      properties:
        username:
          type: string
          example: "mauriciomoraga"
        email:
          type: string
          format: email
          example: "example@mail.com"
        password:
          type: string
          minLength: 6
          example: "securepassword"
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "example@mail.com"
        password:
          type: string
          example: "securepassword"
    UserUpdate:
      type: object
      properties:
        username:
          type: string
          example: "mauriciomoraga"
        email:
          type: string
          format: email
          example: "example@mail.com"
        password:
          type: string
          minLength: 6
          example: "securepassword"
